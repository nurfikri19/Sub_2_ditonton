// Mocks generated by Mockito 5.2.0 from annotations
// in ditonton/test/presentation/test_bloc/movie.dart.
// Do not manually edit this file.

import 'dart:async' as _i23;
import 'dart:convert' as _i29;
import 'dart:typed_data' as _i30;

import 'package:bloc/bloc.dart' as _i24;
import 'package:dartz/dartz.dart' as _i5;
import 'package:ditonton/common/failure.dart' as _i25;
import 'package:ditonton/domain/entities/movie.dart' as _i27;
import 'package:ditonton/domain/entities/movie_detail.dart' as _i26;
import 'package:ditonton/domain/repositories/movie_repository.dart' as _i4;
import 'package:ditonton/domain/usecases/get_movie_detail.dart' as _i2;
import 'package:ditonton/domain/usecases/get_movie_recommendations.dart'
    as _i10;
import 'package:ditonton/domain/usecases/get_now_playing_movies.dart' as _i6;
import 'package:ditonton/domain/usecases/get_popular_movies.dart' as _i8;
import 'package:ditonton/domain/usecases/get_top_rated_movies.dart' as _i14;
import 'package:ditonton/domain/usecases/get_watchlist_movies.dart' as _i16;
import 'package:ditonton/domain/usecases/get_watchlist_status.dart' as _i17;
import 'package:ditonton/domain/usecases/remove_watchlist.dart' as _i19;
import 'package:ditonton/domain/usecases/save_watchlist.dart' as _i18;
import 'package:ditonton/domain/usecases/search_movies.dart' as _i12;
import 'package:ditonton/presentation/bloc/movie/movie_detail_bloc.dart' as _i3;
import 'package:ditonton/presentation/bloc/movie/movie_now_playing_bloc.dart'
    as _i7;
import 'package:ditonton/presentation/bloc/movie/movie_popular_bloc.dart'
    as _i9;
import 'package:ditonton/presentation/bloc/movie/movie_recommendation_bloc.dart'
    as _i11;
import 'package:ditonton/presentation/bloc/movie/movie_search_bloc.dart'
    as _i13;
import 'package:ditonton/presentation/bloc/movie/movie_top_rated_bloc.dart'
    as _i15;
import 'package:ditonton/presentation/bloc/movie/movie_watchlist_bloc.dart'
    as _i20;
import 'package:http/src/base_request.dart' as _i31;
import 'package:http/src/client.dart' as _i28;
import 'package:http/src/response.dart' as _i21;
import 'package:http/src/streamed_response.dart' as _i22;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetMovieDetail_0 extends _i1.Fake implements _i2.GetMovieDetail {}

class _FakeMovieDetailState_1 extends _i1.Fake implements _i3.MovieDetailState {
}

class _FakeMovieRepository_2 extends _i1.Fake implements _i4.MovieRepository {}

class _FakeEither_3<L, R> extends _i1.Fake implements _i5.Either<L, R> {}

class _FakeGetNowPlayingMovies_4 extends _i1.Fake
    implements _i6.GetNowPlayingMovies {}

class _FakeMovieNowPlayingState_5 extends _i1.Fake
    implements _i7.MovieNowPlayingState {}

class _FakeGetPopularMovies_6 extends _i1.Fake implements _i8.GetPopularMovies {
}

class _FakeMoviePopularState_7 extends _i1.Fake
    implements _i9.MoviePopularState {}

class _FakeGetMovieRecommendations_8 extends _i1.Fake
    implements _i10.GetMovieRecommendations {}

class _FakeMovieRecommendationState_9 extends _i1.Fake
    implements _i11.MovieRecommendationState {}

class _FakeSearchMovies_10 extends _i1.Fake implements _i12.SearchMovies {}

class _FakeMovieSearchState_11 extends _i1.Fake
    implements _i13.MovieSearchState {}

class _FakeGetTopRatedMovies_12 extends _i1.Fake
    implements _i14.GetTopRatedMovies {}

class _FakeMovieTopRatedState_13 extends _i1.Fake
    implements _i15.MovieTopRatedState {}

class _FakeGetWatchlistMovies_14 extends _i1.Fake
    implements _i16.GetWatchlistMovies {}

class _FakeGetWatchListStatus_15 extends _i1.Fake
    implements _i17.GetWatchListStatus {}

class _FakeSaveWatchlist_16 extends _i1.Fake implements _i18.SaveWatchlist {}

class _FakeRemoveWatchlist_17 extends _i1.Fake implements _i19.RemoveWatchlist {
}

class _FakeMovieWatchlistState_18 extends _i1.Fake
    implements _i20.MovieWatchlistState {}

class _FakeResponse_19 extends _i1.Fake implements _i21.Response {}

class _FakeStreamedResponse_20 extends _i1.Fake
    implements _i22.StreamedResponse {}

/// A class which mocks [MovieDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieDetailBloc extends _i1.Mock implements _i3.MovieDetailBloc {
  MockMovieDetailBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetMovieDetail get getMovieDetail =>
      (super.noSuchMethod(Invocation.getter(#getMovieDetail),
          returnValue: _FakeGetMovieDetail_0()) as _i2.GetMovieDetail);
  @override
  _i3.MovieDetailState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMovieDetailState_1()) as _i3.MovieDetailState);
  @override
  _i23.Stream<_i3.MovieDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.MovieDetailState>.empty())
          as _i23.Stream<_i3.MovieDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.MovieDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.MovieDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.MovieDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.MovieDetailEvent>(
          _i24.EventHandler<E, _i3.MovieDetailState>? handler,
          {_i24.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i24.Transition<_i3.MovieDetailEvent, _i3.MovieDetailState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i23.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i23.Future<void>);
  @override
  void onChange(_i24.Change<_i3.MovieDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetMovieDetail].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieDetail extends _i1.Mock implements _i2.GetMovieDetail {
  MockGetMovieDetail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i23.Future<_i5.Either<_i25.Failure, _i26.MovieDetail>> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i5.Either<_i25.Failure, _i26.MovieDetail>>.value(
              _FakeEither_3<_i25.Failure, _i26.MovieDetail>())) as _i23
          .Future<_i5.Either<_i25.Failure, _i26.MovieDetail>>);
}

/// A class which mocks [MovieNowPlayingBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieNowPlayingBloc extends _i1.Mock
    implements _i7.MovieNowPlayingBloc {
  MockMovieNowPlayingBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetNowPlayingMovies get getNowPlayingMovies => (super.noSuchMethod(
      Invocation.getter(#getNowPlayingMovies),
      returnValue: _FakeGetNowPlayingMovies_4()) as _i6.GetNowPlayingMovies);
  @override
  _i7.MovieNowPlayingState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeMovieNowPlayingState_5()) as _i7.MovieNowPlayingState);
  @override
  _i23.Stream<_i7.MovieNowPlayingState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i7.MovieNowPlayingState>.empty())
          as _i23.Stream<_i7.MovieNowPlayingState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i7.MovieNowPlayingEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i7.MovieNowPlayingEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i7.MovieNowPlayingState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i7.MovieNowPlayingEvent>(
          _i24.EventHandler<E, _i7.MovieNowPlayingState>? handler,
          {_i24.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i24.Transition<_i7.MovieNowPlayingEvent, _i7.MovieNowPlayingState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i23.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i23.Future<void>);
  @override
  void onChange(_i24.Change<_i7.MovieNowPlayingState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetNowPlayingMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNowPlayingMovies extends _i1.Mock
    implements _i6.GetNowPlayingMovies {
  MockGetNowPlayingMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i23.Future<_i5.Either<_i25.Failure, List<_i27.Movie>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i5.Either<_i25.Failure, List<_i27.Movie>>>.value(
              _FakeEither_3<_i25.Failure, List<_i27.Movie>>())) as _i23
          .Future<_i5.Either<_i25.Failure, List<_i27.Movie>>>);
}

/// A class which mocks [MoviePopularBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMoviePopularBloc extends _i1.Mock implements _i9.MoviePopularBloc {
  MockMoviePopularBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.GetPopularMovies get getPopularMovies =>
      (super.noSuchMethod(Invocation.getter(#getPopularMovies),
          returnValue: _FakeGetPopularMovies_6()) as _i8.GetPopularMovies);
  @override
  _i9.MoviePopularState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMoviePopularState_7()) as _i9.MoviePopularState);
  @override
  _i23.Stream<_i9.MoviePopularState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i9.MoviePopularState>.empty())
          as _i23.Stream<_i9.MoviePopularState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i9.MoviePopularEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i9.MoviePopularEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i9.MoviePopularState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i9.MoviePopularEvent>(
          _i24.EventHandler<E, _i9.MoviePopularState>? handler,
          {_i24.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i24.Transition<_i9.MoviePopularEvent, _i9.MoviePopularState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i23.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i23.Future<void>);
  @override
  void onChange(_i24.Change<_i9.MoviePopularState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetPopularMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularMovies extends _i1.Mock implements _i8.GetPopularMovies {
  MockGetPopularMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i23.Future<_i5.Either<_i25.Failure, List<_i27.Movie>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i5.Either<_i25.Failure, List<_i27.Movie>>>.value(
              _FakeEither_3<_i25.Failure, List<_i27.Movie>>())) as _i23
          .Future<_i5.Either<_i25.Failure, List<_i27.Movie>>>);
}

/// A class which mocks [MovieRecommendationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieRecommendationBloc extends _i1.Mock
    implements _i11.MovieRecommendationBloc {
  MockMovieRecommendationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.GetMovieRecommendations get getMovieRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getMovieRecommendations),
              returnValue: _FakeGetMovieRecommendations_8())
          as _i10.GetMovieRecommendations);
  @override
  _i11.MovieRecommendationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeMovieRecommendationState_9())
          as _i11.MovieRecommendationState);
  @override
  _i23.Stream<_i11.MovieRecommendationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i11.MovieRecommendationState>.empty())
          as _i23.Stream<_i11.MovieRecommendationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i11.MovieRecommendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i11.MovieRecommendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i11.MovieRecommendationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i11.MovieRecommendationEvent>(
          _i24.EventHandler<E, _i11.MovieRecommendationState>? handler,
          {_i24.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i24.Transition<_i11.MovieRecommendationEvent,
                  _i11.MovieRecommendationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i23.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i23.Future<void>);
  @override
  void onChange(_i24.Change<_i11.MovieRecommendationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetMovieRecommendations].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetMovieRecommendations extends _i1.Mock
    implements _i10.GetMovieRecommendations {
  MockGetMovieRecommendations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i23.Future<_i5.Either<_i25.Failure, List<_i27.Movie>>> execute(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i5.Either<_i25.Failure, List<_i27.Movie>>>.value(
              _FakeEither_3<_i25.Failure, List<_i27.Movie>>())) as _i23
          .Future<_i5.Either<_i25.Failure, List<_i27.Movie>>>);
}

/// A class which mocks [MovieSearchBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieSearchBloc extends _i1.Mock implements _i13.MovieSearchBloc {
  MockMovieSearchBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.SearchMovies get searchMovies =>
      (super.noSuchMethod(Invocation.getter(#searchMovies),
          returnValue: _FakeSearchMovies_10()) as _i12.SearchMovies);
  @override
  _i13.MovieSearchState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeMovieSearchState_11()) as _i13.MovieSearchState);
  @override
  _i23.Stream<_i13.MovieSearchState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i13.MovieSearchState>.empty())
          as _i23.Stream<_i13.MovieSearchState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i13.MovieSearchEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i13.MovieSearchEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i13.MovieSearchState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i13.MovieSearchEvent>(
          _i24.EventHandler<E, _i13.MovieSearchState>? handler,
          {_i24.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i24.Transition<_i13.MovieSearchEvent, _i13.MovieSearchState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i23.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i23.Future<void>);
  @override
  void onChange(_i24.Change<_i13.MovieSearchState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [SearchMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchMovies extends _i1.Mock implements _i12.SearchMovies {
  MockSearchMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i23.Future<_i5.Either<_i25.Failure, List<_i27.Movie>>> execute(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#execute, [query]),
          returnValue: Future<_i5.Either<_i25.Failure, List<_i27.Movie>>>.value(
              _FakeEither_3<_i25.Failure, List<_i27.Movie>>())) as _i23
          .Future<_i5.Either<_i25.Failure, List<_i27.Movie>>>);
}

/// A class which mocks [GetTopRatedMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedMovies extends _i1.Mock implements _i14.GetTopRatedMovies {
  MockGetTopRatedMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i23.Future<_i5.Either<_i25.Failure, List<_i27.Movie>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i5.Either<_i25.Failure, List<_i27.Movie>>>.value(
              _FakeEither_3<_i25.Failure, List<_i27.Movie>>())) as _i23
          .Future<_i5.Either<_i25.Failure, List<_i27.Movie>>>);
}

/// A class which mocks [MovieTopRatedBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieTopRatedBloc extends _i1.Mock implements _i15.MovieTopRatedBloc {
  MockMovieTopRatedBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.GetTopRatedMovies get getTopRatedMovies =>
      (super.noSuchMethod(Invocation.getter(#getTopRatedMovies),
          returnValue: _FakeGetTopRatedMovies_12()) as _i14.GetTopRatedMovies);
  @override
  _i15.MovieTopRatedState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeMovieTopRatedState_13()) as _i15.MovieTopRatedState);
  @override
  _i23.Stream<_i15.MovieTopRatedState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i15.MovieTopRatedState>.empty())
          as _i23.Stream<_i15.MovieTopRatedState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i15.MovieTopRatedEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i15.MovieTopRatedEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i15.MovieTopRatedState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i15.MovieTopRatedEvent>(
          _i24.EventHandler<E, _i15.MovieTopRatedState>? handler,
          {_i24.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i24.Transition<_i15.MovieTopRatedEvent, _i15.MovieTopRatedState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i23.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i23.Future<void>);
  @override
  void onChange(_i24.Change<_i15.MovieTopRatedState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [MovieWatchlistBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockMovieWatchlistBloc extends _i1.Mock
    implements _i20.MovieWatchlistBloc {
  MockMovieWatchlistBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.GetWatchlistMovies get getWatchlistMovies => (super.noSuchMethod(
      Invocation.getter(#getWatchlistMovies),
      returnValue: _FakeGetWatchlistMovies_14()) as _i16.GetWatchlistMovies);
  @override
  _i17.GetWatchListStatus get getWatchListStatus => (super.noSuchMethod(
      Invocation.getter(#getWatchListStatus),
      returnValue: _FakeGetWatchListStatus_15()) as _i17.GetWatchListStatus);
  @override
  _i18.SaveWatchlist get saveWatchlist =>
      (super.noSuchMethod(Invocation.getter(#saveWatchlist),
          returnValue: _FakeSaveWatchlist_16()) as _i18.SaveWatchlist);
  @override
  _i19.RemoveWatchlist get removeWatchlist =>
      (super.noSuchMethod(Invocation.getter(#removeWatchlist),
          returnValue: _FakeRemoveWatchlist_17()) as _i19.RemoveWatchlist);
  @override
  _i20.MovieWatchlistState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeMovieWatchlistState_18()) as _i20.MovieWatchlistState);
  @override
  _i23.Stream<_i20.MovieWatchlistState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i20.MovieWatchlistState>.empty())
          as _i23.Stream<_i20.MovieWatchlistState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i20.MovieWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i20.MovieWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i20.MovieWatchlistState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i20.MovieWatchlistEvent>(
          _i24.EventHandler<E, _i20.MovieWatchlistState>? handler,
          {_i24.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i24.Transition<_i20.MovieWatchlistEvent, _i20.MovieWatchlistState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i23.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i23.Future<void>);
  @override
  void onChange(_i24.Change<_i20.MovieWatchlistState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetWatchlistMovies].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistMovies extends _i1.Mock
    implements _i16.GetWatchlistMovies {
  MockGetWatchlistMovies() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i23.Future<_i5.Either<_i25.Failure, List<_i27.Movie>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i5.Either<_i25.Failure, List<_i27.Movie>>>.value(
              _FakeEither_3<_i25.Failure, List<_i27.Movie>>())) as _i23
          .Future<_i5.Either<_i25.Failure, List<_i27.Movie>>>);
}

/// A class which mocks [GetWatchListStatus].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatus extends _i1.Mock
    implements _i17.GetWatchListStatus {
  MockGetWatchListStatus() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i23.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<bool>.value(false)) as _i23.Future<bool>);
}

/// A class which mocks [RemoveWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlist extends _i1.Mock implements _i19.RemoveWatchlist {
  MockRemoveWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i23.Future<_i5.Either<_i25.Failure, String>> execute(
          _i26.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#execute, [movie]),
              returnValue: Future<_i5.Either<_i25.Failure, String>>.value(
                  _FakeEither_3<_i25.Failure, String>()))
          as _i23.Future<_i5.Either<_i25.Failure, String>>);
}

/// A class which mocks [SaveWatchlist].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlist extends _i1.Mock implements _i18.SaveWatchlist {
  MockSaveWatchlist() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.MovieRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeMovieRepository_2()) as _i4.MovieRepository);
  @override
  _i23.Future<_i5.Either<_i25.Failure, String>> execute(
          _i26.MovieDetail? movie) =>
      (super.noSuchMethod(Invocation.method(#execute, [movie]),
              returnValue: Future<_i5.Either<_i25.Failure, String>>.value(
                  _FakeEither_3<_i25.Failure, String>()))
          as _i23.Future<_i5.Either<_i25.Failure, String>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i28.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i23.Future<_i21.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i21.Response>.value(_FakeResponse_19()))
          as _i23.Future<_i21.Response>);
  @override
  _i23.Future<_i21.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i21.Response>.value(_FakeResponse_19()))
          as _i23.Future<_i21.Response>);
  @override
  _i23.Future<_i21.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i29.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i21.Response>.value(_FakeResponse_19()))
          as _i23.Future<_i21.Response>);
  @override
  _i23.Future<_i21.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i29.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i21.Response>.value(_FakeResponse_19()))
          as _i23.Future<_i21.Response>);
  @override
  _i23.Future<_i21.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i29.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i21.Response>.value(_FakeResponse_19()))
          as _i23.Future<_i21.Response>);
  @override
  _i23.Future<_i21.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i29.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i21.Response>.value(_FakeResponse_19()))
          as _i23.Future<_i21.Response>);
  @override
  _i23.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i23.Future<String>);
  @override
  _i23.Future<_i30.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i30.Uint8List>.value(_i30.Uint8List(0)))
          as _i23.Future<_i30.Uint8List>);
  @override
  _i23.Future<_i22.StreamedResponse> send(_i31.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: Future<_i22.StreamedResponse>.value(
                  _FakeStreamedResponse_20()))
          as _i23.Future<_i22.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
