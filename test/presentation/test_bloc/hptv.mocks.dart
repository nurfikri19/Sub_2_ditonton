// Mocks generated by Mockito 5.2.0 from annotations
// in ditonton/test/presentation/test_bloc/hptv.dart.
// Do not manually edit this file.

import 'dart:async' as _i23;
import 'dart:convert' as _i29;
import 'dart:typed_data' as _i30;

import 'package:bloc/bloc.dart' as _i26;
import 'package:dartz/dartz.dart' as _i3;
import 'package:ditonton/common/failure.dart' as _i24;
import 'package:ditonton/domain/entities/hptv/hptv.dart' as _i27;
import 'package:ditonton/domain/entities/hptv/hptv_detail.dart' as _i25;
import 'package:ditonton/domain/repositories/hptv_repository.dart' as _i2;
import 'package:ditonton/domain/usecases/hptv/get_hptv_detail.dart' as _i4;
import 'package:ditonton/domain/usecases/hptv/get_hptv_recomendations.dart'
    as _i10;
import 'package:ditonton/domain/usecases/hptv/get_now_playing_hptv.dart' as _i6;
import 'package:ditonton/domain/usecases/hptv/get_popular_hptv.dart' as _i8;
import 'package:ditonton/domain/usecases/hptv/get_top_rated_hptv.dart' as _i14;
import 'package:ditonton/domain/usecases/hptv/get_watchlist_hptv.dart' as _i16;
import 'package:ditonton/domain/usecases/hptv/get_watchlist_status_hptv.dart'
    as _i17;
import 'package:ditonton/domain/usecases/hptv/remove_watchlist_hptv.dart'
    as _i19;
import 'package:ditonton/domain/usecases/hptv/save_watchlist_hptv.dart' as _i18;
import 'package:ditonton/domain/usecases/hptv/search_hptv.dart' as _i12;
import 'package:ditonton/presentation/bloc/hptv/hptv_detail_bloc.dart' as _i5;
import 'package:ditonton/presentation/bloc/hptv/hptv_on_air_bloc.dart' as _i7;
import 'package:ditonton/presentation/bloc/hptv/hptv_popular_bloc.dart' as _i9;
import 'package:ditonton/presentation/bloc/hptv/hptv_recommendation_bloc.dart'
    as _i11;
import 'package:ditonton/presentation/bloc/hptv/hptv_search_bloc.dart' as _i13;
import 'package:ditonton/presentation/bloc/hptv/hptv_top_rated_bloc.dart'
    as _i15;
import 'package:ditonton/presentation/bloc/hptv/hptv_watchlist_bloc.dart'
    as _i20;
import 'package:http/src/base_request.dart' as _i31;
import 'package:http/src/client.dart' as _i28;
import 'package:http/src/response.dart' as _i21;
import 'package:http/src/streamed_response.dart' as _i22;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeHptvRepository_0 extends _i1.Fake implements _i2.HptvRepository {}

class _FakeEither_1<L, R> extends _i1.Fake implements _i3.Either<L, R> {}

class _FakeGetHptvDetail_2 extends _i1.Fake implements _i4.GetHptvDetail {}

class _FakeHptvDetailState_3 extends _i1.Fake implements _i5.HptvDetailState {}

class _FakeGetNowPlayingHptv_4 extends _i1.Fake
    implements _i6.GetNowPlayingHptv {}

class _FakeHptvOnAirState_5 extends _i1.Fake implements _i7.HptvOnAirState {}

class _FakeGetPopularHptv_6 extends _i1.Fake implements _i8.GetPopularHptv {}

class _FakeHptvPopularState_7 extends _i1.Fake implements _i9.HptvPopularState {
}

class _FakeGetHptvRecommendations_8 extends _i1.Fake
    implements _i10.GetHptvRecommendations {}

class _FakeHptvRecommendationState_9 extends _i1.Fake
    implements _i11.HptvRecommendationState {}

class _FakeSearchHptv_10 extends _i1.Fake implements _i12.SearchHptv {}

class _FakeHptvSearchState_11 extends _i1.Fake implements _i13.HptvSearchState {
}

class _FakeGetTopRatedHptv_12 extends _i1.Fake implements _i14.GetTopRatedHptv {
}

class _FakeHptvTopRatedState_13 extends _i1.Fake
    implements _i15.HptvTopRatedState {}

class _FakeGetWatchlistHptv_14 extends _i1.Fake
    implements _i16.GetWatchlistHptv {}

class _FakeGetWatchListStatusHptv_15 extends _i1.Fake
    implements _i17.GetWatchListStatusHptv {}

class _FakeSaveWatchlistHptv_16 extends _i1.Fake
    implements _i18.SaveWatchlistHptv {}

class _FakeRemoveWatchlistHptv_17 extends _i1.Fake
    implements _i19.RemoveWatchlistHptv {}

class _FakeHptvWatchlistState_18 extends _i1.Fake
    implements _i20.HptvWatchlistState {}

class _FakeResponse_19 extends _i1.Fake implements _i21.Response {}

class _FakeStreamedResponse_20 extends _i1.Fake
    implements _i22.StreamedResponse {}

/// A class which mocks [GetHptvDetail].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetHptvDetail extends _i1.Mock implements _i4.GetHptvDetail {
  MockGetHptvDetail() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HptvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeHptvRepository_0()) as _i2.HptvRepository);
  @override
  _i23.Future<_i3.Either<_i24.Failure, _i25.HptvDetail>> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i3.Either<_i24.Failure, _i25.HptvDetail>>.value(
              _FakeEither_1<_i24.Failure, _i25.HptvDetail>())) as _i23
          .Future<_i3.Either<_i24.Failure, _i25.HptvDetail>>);
}

/// A class which mocks [HptvDetailBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHptvDetailBloc extends _i1.Mock implements _i5.HptvDetailBloc {
  MockHptvDetailBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetHptvDetail get getHptvDetail =>
      (super.noSuchMethod(Invocation.getter(#getHptvDetail),
          returnValue: _FakeGetHptvDetail_2()) as _i4.GetHptvDetail);
  @override
  _i5.HptvDetailState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeHptvDetailState_3()) as _i5.HptvDetailState);
  @override
  _i23.Stream<_i5.HptvDetailState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i5.HptvDetailState>.empty())
          as _i23.Stream<_i5.HptvDetailState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i5.HptvDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i5.HptvDetailEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i5.HptvDetailState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i5.HptvDetailEvent>(
          _i26.EventHandler<E, _i5.HptvDetailState>? handler,
          {_i26.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i26.Transition<_i5.HptvDetailEvent, _i5.HptvDetailState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i23.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i23.Future<void>);
  @override
  void onChange(_i26.Change<_i5.HptvDetailState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [HptvOnAirBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHptvOnAirBloc extends _i1.Mock implements _i7.HptvOnAirBloc {
  MockHptvOnAirBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i6.GetNowPlayingHptv get getOnAirHptv =>
      (super.noSuchMethod(Invocation.getter(#getOnAirHptv),
          returnValue: _FakeGetNowPlayingHptv_4()) as _i6.GetNowPlayingHptv);
  @override
  _i7.HptvOnAirState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _FakeHptvOnAirState_5()) as _i7.HptvOnAirState);
  @override
  _i23.Stream<_i7.HptvOnAirState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i7.HptvOnAirState>.empty())
          as _i23.Stream<_i7.HptvOnAirState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i7.HptvOnAirEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i7.HptvOnAirEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i7.HptvOnAirState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i7.HptvOnAirEvent>(
          _i26.EventHandler<E, _i7.HptvOnAirState>? handler,
          {_i26.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i26.Transition<_i7.HptvOnAirEvent, _i7.HptvOnAirState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i23.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i23.Future<void>);
  @override
  void onChange(_i26.Change<_i7.HptvOnAirState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetNowPlayingHptv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetNowPlayingHptv extends _i1.Mock implements _i6.GetNowPlayingHptv {
  MockGetNowPlayingHptv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HptvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeHptvRepository_0()) as _i2.HptvRepository);
  @override
  _i23.Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>>.value(
              _FakeEither_1<_i24.Failure, List<_i27.Hptv>>())) as _i23
          .Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>>);
}

/// A class which mocks [GetPopularHptv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetPopularHptv extends _i1.Mock implements _i8.GetPopularHptv {
  MockGetPopularHptv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HptvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeHptvRepository_0()) as _i2.HptvRepository);
  @override
  _i23.Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>>.value(
              _FakeEither_1<_i24.Failure, List<_i27.Hptv>>())) as _i23
          .Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>>);
}

/// A class which mocks [HptvPopularBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHptvPopularBloc extends _i1.Mock implements _i9.HptvPopularBloc {
  MockHptvPopularBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i8.GetPopularHptv get getPopularHptv =>
      (super.noSuchMethod(Invocation.getter(#getPopularHptv),
          returnValue: _FakeGetPopularHptv_6()) as _i8.GetPopularHptv);
  @override
  _i9.HptvPopularState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeHptvPopularState_7()) as _i9.HptvPopularState);
  @override
  _i23.Stream<_i9.HptvPopularState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i9.HptvPopularState>.empty())
          as _i23.Stream<_i9.HptvPopularState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i9.HptvPopularEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i9.HptvPopularEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i9.HptvPopularState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i9.HptvPopularEvent>(
          _i26.EventHandler<E, _i9.HptvPopularState>? handler,
          {_i26.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i26.Transition<_i9.HptvPopularEvent, _i9.HptvPopularState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i23.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i23.Future<void>);
  @override
  void onChange(_i26.Change<_i9.HptvPopularState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [HptvRecommendationBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHptvRecommendationBloc extends _i1.Mock
    implements _i11.HptvRecommendationBloc {
  MockHptvRecommendationBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i10.GetHptvRecommendations get getHptvRecommendations =>
      (super.noSuchMethod(Invocation.getter(#getHptvRecommendations),
              returnValue: _FakeGetHptvRecommendations_8())
          as _i10.GetHptvRecommendations);
  @override
  _i11.HptvRecommendationState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
              returnValue: _FakeHptvRecommendationState_9())
          as _i11.HptvRecommendationState);
  @override
  _i23.Stream<_i11.HptvRecommendationState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i11.HptvRecommendationState>.empty())
          as _i23.Stream<_i11.HptvRecommendationState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i11.HptvRecommendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i11.HptvRecommendationEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i11.HptvRecommendationState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i11.HptvRecommendationEvent>(
          _i26.EventHandler<E, _i11.HptvRecommendationState>? handler,
          {_i26.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i26.Transition<_i11.HptvRecommendationEvent,
                  _i11.HptvRecommendationState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i23.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i23.Future<void>);
  @override
  void onChange(_i26.Change<_i11.HptvRecommendationState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetHptvRecommendations].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetHptvRecommendations extends _i1.Mock
    implements _i10.GetHptvRecommendations {
  MockGetHptvRecommendations() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HptvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeHptvRepository_0()) as _i2.HptvRepository);
  @override
  _i23.Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>> execute(dynamic id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>>.value(
              _FakeEither_1<_i24.Failure, List<_i27.Hptv>>())) as _i23
          .Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>>);
}

/// A class which mocks [HptvSearchBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHptvSearchBloc extends _i1.Mock implements _i13.HptvSearchBloc {
  MockHptvSearchBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i12.SearchHptv get searchHptv =>
      (super.noSuchMethod(Invocation.getter(#searchHptv),
          returnValue: _FakeSearchHptv_10()) as _i12.SearchHptv);
  @override
  _i13.HptvSearchState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeHptvSearchState_11()) as _i13.HptvSearchState);
  @override
  _i23.Stream<_i13.HptvSearchState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i13.HptvSearchState>.empty())
          as _i23.Stream<_i13.HptvSearchState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i13.HptvSearchEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i13.HptvSearchEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i13.HptvSearchState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i13.HptvSearchEvent>(
          _i26.EventHandler<E, _i13.HptvSearchState>? handler,
          {_i26.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i26.Transition<_i13.HptvSearchEvent, _i13.HptvSearchState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i23.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i23.Future<void>);
  @override
  void onChange(_i26.Change<_i13.HptvSearchState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [SearchHptv].
///
/// See the documentation for Mockito's code generation for more information.
class MockSearchHptv extends _i1.Mock implements _i12.SearchHptv {
  MockSearchHptv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HptvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeHptvRepository_0()) as _i2.HptvRepository);
  @override
  _i23.Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>> execute(
          String? query) =>
      (super.noSuchMethod(Invocation.method(#execute, [query]),
          returnValue: Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>>.value(
              _FakeEither_1<_i24.Failure, List<_i27.Hptv>>())) as _i23
          .Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>>);
}

/// A class which mocks [GetTopRatedHptv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetTopRatedHptv extends _i1.Mock implements _i14.GetTopRatedHptv {
  MockGetTopRatedHptv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HptvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeHptvRepository_0()) as _i2.HptvRepository);
  @override
  _i23.Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>>.value(
              _FakeEither_1<_i24.Failure, List<_i27.Hptv>>())) as _i23
          .Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>>);
}

/// A class which mocks [HptvTopRatedBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHptvTopRatedBloc extends _i1.Mock implements _i15.HptvTopRatedBloc {
  MockHptvTopRatedBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i14.GetTopRatedHptv get getTopRatedHptv =>
      (super.noSuchMethod(Invocation.getter(#getTopRatedHptv),
          returnValue: _FakeGetTopRatedHptv_12()) as _i14.GetTopRatedHptv);
  @override
  _i15.HptvTopRatedState get state =>
      (super.noSuchMethod(Invocation.getter(#state),
          returnValue: _FakeHptvTopRatedState_13()) as _i15.HptvTopRatedState);
  @override
  _i23.Stream<_i15.HptvTopRatedState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i15.HptvTopRatedState>.empty())
          as _i23.Stream<_i15.HptvTopRatedState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i15.HptvTopRatedEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i15.HptvTopRatedEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i15.HptvTopRatedState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i15.HptvTopRatedEvent>(
          _i26.EventHandler<E, _i15.HptvTopRatedState>? handler,
          {_i26.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i26.Transition<_i15.HptvTopRatedEvent, _i15.HptvTopRatedState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i23.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i23.Future<void>);
  @override
  void onChange(_i26.Change<_i15.HptvTopRatedState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [HptvWatchlistBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockHptvWatchlistBloc extends _i1.Mock implements _i20.HptvWatchlistBloc {
  MockHptvWatchlistBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i16.GetWatchlistHptv get getWatchlistHptv =>
      (super.noSuchMethod(Invocation.getter(#getWatchlistHptv),
          returnValue: _FakeGetWatchlistHptv_14()) as _i16.GetWatchlistHptv);
  @override
  _i17.GetWatchListStatusHptv get getWatchListStatus =>
      (super.noSuchMethod(Invocation.getter(#getWatchListStatus),
              returnValue: _FakeGetWatchListStatusHptv_15())
          as _i17.GetWatchListStatusHptv);
  @override
  _i18.SaveWatchlistHptv get saveWatchlist =>
      (super.noSuchMethod(Invocation.getter(#saveWatchlist),
          returnValue: _FakeSaveWatchlistHptv_16()) as _i18.SaveWatchlistHptv);
  @override
  _i19.RemoveWatchlistHptv get removeWatchlist => (super.noSuchMethod(
      Invocation.getter(#removeWatchlist),
      returnValue: _FakeRemoveWatchlistHptv_17()) as _i19.RemoveWatchlistHptv);
  @override
  _i20.HptvWatchlistState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeHptvWatchlistState_18()) as _i20.HptvWatchlistState);
  @override
  _i23.Stream<_i20.HptvWatchlistState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i20.HptvWatchlistState>.empty())
          as _i23.Stream<_i20.HptvWatchlistState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i20.HptvWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i20.HptvWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i20.HptvWatchlistState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i20.HptvWatchlistEvent>(
          _i26.EventHandler<E, _i20.HptvWatchlistState>? handler,
          {_i26.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i26.Transition<_i20.HptvWatchlistEvent, _i20.HptvWatchlistState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i23.Future<void> close() => (super.noSuchMethod(
      Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i23.Future<void>);
  @override
  void onChange(_i26.Change<_i20.HptvWatchlistState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GetWatchlistHptv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchlistHptv extends _i1.Mock implements _i16.GetWatchlistHptv {
  MockGetWatchlistHptv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i23.Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>> execute() =>
      (super.noSuchMethod(Invocation.method(#execute, []),
          returnValue: Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>>.value(
              _FakeEither_1<_i24.Failure, List<_i27.Hptv>>())) as _i23
          .Future<_i3.Either<_i24.Failure, List<_i27.Hptv>>>);
}

/// A class which mocks [GetWatchListStatusHptv].
///
/// See the documentation for Mockito's code generation for more information.
class MockGetWatchListStatusHptv extends _i1.Mock
    implements _i17.GetWatchListStatusHptv {
  MockGetWatchListStatusHptv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HptvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeHptvRepository_0()) as _i2.HptvRepository);
  @override
  _i23.Future<bool> execute(int? id) =>
      (super.noSuchMethod(Invocation.method(#execute, [id]),
          returnValue: Future<bool>.value(false)) as _i23.Future<bool>);
}

/// A class which mocks [RemoveWatchlistHptv].
///
/// See the documentation for Mockito's code generation for more information.
class MockRemoveWatchlistHptv extends _i1.Mock
    implements _i19.RemoveWatchlistHptv {
  MockRemoveWatchlistHptv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HptvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeHptvRepository_0()) as _i2.HptvRepository);
  @override
  _i23.Future<_i3.Either<_i24.Failure, String>> execute(_i25.HptvDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#execute, [tv]),
              returnValue: Future<_i3.Either<_i24.Failure, String>>.value(
                  _FakeEither_1<_i24.Failure, String>()))
          as _i23.Future<_i3.Either<_i24.Failure, String>>);
}

/// A class which mocks [SaveWatchlistHptv].
///
/// See the documentation for Mockito's code generation for more information.
class MockSaveWatchlistHptv extends _i1.Mock implements _i18.SaveWatchlistHptv {
  MockSaveWatchlistHptv() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.HptvRepository get repository =>
      (super.noSuchMethod(Invocation.getter(#repository),
          returnValue: _FakeHptvRepository_0()) as _i2.HptvRepository);
  @override
  _i23.Future<_i3.Either<_i24.Failure, String>> execute(_i25.HptvDetail? tv) =>
      (super.noSuchMethod(Invocation.method(#execute, [tv]),
              returnValue: Future<_i3.Either<_i24.Failure, String>>.value(
                  _FakeEither_1<_i24.Failure, String>()))
          as _i23.Future<_i3.Either<_i24.Failure, String>>);
}

/// A class which mocks [Client].
///
/// See the documentation for Mockito's code generation for more information.
class MockHttpClient extends _i1.Mock implements _i28.Client {
  MockHttpClient() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i23.Future<_i21.Response> head(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#head, [url], {#headers: headers}),
              returnValue: Future<_i21.Response>.value(_FakeResponse_19()))
          as _i23.Future<_i21.Response>);
  @override
  _i23.Future<_i21.Response> get(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#get, [url], {#headers: headers}),
              returnValue: Future<_i21.Response>.value(_FakeResponse_19()))
          as _i23.Future<_i21.Response>);
  @override
  _i23.Future<_i21.Response> post(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i29.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#post, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i21.Response>.value(_FakeResponse_19()))
          as _i23.Future<_i21.Response>);
  @override
  _i23.Future<_i21.Response> put(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i29.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#put, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i21.Response>.value(_FakeResponse_19()))
          as _i23.Future<_i21.Response>);
  @override
  _i23.Future<_i21.Response> patch(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i29.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#patch, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i21.Response>.value(_FakeResponse_19()))
          as _i23.Future<_i21.Response>);
  @override
  _i23.Future<_i21.Response> delete(Uri? url,
          {Map<String, String>? headers,
          Object? body,
          _i29.Encoding? encoding}) =>
      (super.noSuchMethod(
              Invocation.method(#delete, [url],
                  {#headers: headers, #body: body, #encoding: encoding}),
              returnValue: Future<_i21.Response>.value(_FakeResponse_19()))
          as _i23.Future<_i21.Response>);
  @override
  _i23.Future<String> read(Uri? url, {Map<String, String>? headers}) =>
      (super.noSuchMethod(Invocation.method(#read, [url], {#headers: headers}),
          returnValue: Future<String>.value('')) as _i23.Future<String>);
  @override
  _i23.Future<_i30.Uint8List> readBytes(Uri? url,
          {Map<String, String>? headers}) =>
      (super.noSuchMethod(
              Invocation.method(#readBytes, [url], {#headers: headers}),
              returnValue: Future<_i30.Uint8List>.value(_i30.Uint8List(0)))
          as _i23.Future<_i30.Uint8List>);
  @override
  _i23.Future<_i22.StreamedResponse> send(_i31.BaseRequest? request) =>
      (super.noSuchMethod(Invocation.method(#send, [request]),
              returnValue: Future<_i22.StreamedResponse>.value(
                  _FakeStreamedResponse_20()))
          as _i23.Future<_i22.StreamedResponse>);
  @override
  void close() => super.noSuchMethod(Invocation.method(#close, []),
      returnValueForMissingStub: null);
}
